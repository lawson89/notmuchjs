{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Skinner image borrowed from htmx twitter feed Home Write less js, get more done! You don't need a SPA to have a great looking and functional webapp. Whether you are a backend developer, a solo entrepreneur or just someone looking to save time - there are more robust options for low/no js than ever before. What is low/no js? Everyone is familiar with the Web 1.0 full page refresh model of development. What's nice about it is that it's fast to develop in, leverages great mature technologies like Django, Rails and Laravel. What's not so good is that the user experience is not as smooth as that of a SPA. The trouble with SPAs is that it adds a stack of equivalent complexity or greater than your back end to your front end. You've just doubled your workload! There is another way. First browsers have gotten much faster and so with small payloads the user experience is almost instantaneous. Second, a new set of frameworks has been developed that extend html to allow many SPA like functionalities to be accomplished through markup. Third, frameworks such as Phoenix LiveView popularized the use of persistent connections such as websockets to stream updates to the browser. Common factors The server is the engine of state Html is extended with attributes that allow partial page updates Html is passed over the wire instead of Json About My name is Rick Lawson, and I am a software manager and backend developer in the upstate of South Carolina. I am a Django/Python enthusiast and have had great results combining Django with intercooler and now htmx and unpoly. I feel like SPAs are overkill for 90% of apps, and you can get a long way, especially as a solo dev with the combination of a great backend framework + low/no js. I had a couple of side projects that I was able to complete purely due to the fact I could turn them out so quickly with Django + intercooler. I started this site to help devs who are looking at options other than SPAs, and I am hugely enthusiastic about this approach of extending html. There is no tracking or analytics on this site, it's only purpose is to aggregate and help devs see their options quickly.","title":"Home"},{"location":"#home","text":"Write less js, get more done! You don't need a SPA to have a great looking and functional webapp. Whether you are a backend developer, a solo entrepreneur or just someone looking to save time - there are more robust options for low/no js than ever before.","title":"Home"},{"location":"#what-is-lowno-js","text":"Everyone is familiar with the Web 1.0 full page refresh model of development. What's nice about it is that it's fast to develop in, leverages great mature technologies like Django, Rails and Laravel. What's not so good is that the user experience is not as smooth as that of a SPA. The trouble with SPAs is that it adds a stack of equivalent complexity or greater than your back end to your front end. You've just doubled your workload! There is another way. First browsers have gotten much faster and so with small payloads the user experience is almost instantaneous. Second, a new set of frameworks has been developed that extend html to allow many SPA like functionalities to be accomplished through markup. Third, frameworks such as Phoenix LiveView popularized the use of persistent connections such as websockets to stream updates to the browser.","title":"What is low/no js?"},{"location":"#common-factors","text":"The server is the engine of state Html is extended with attributes that allow partial page updates Html is passed over the wire instead of Json","title":"Common factors"},{"location":"#about","text":"My name is Rick Lawson, and I am a software manager and backend developer in the upstate of South Carolina. I am a Django/Python enthusiast and have had great results combining Django with intercooler and now htmx and unpoly. I feel like SPAs are overkill for 90% of apps, and you can get a long way, especially as a solo dev with the combination of a great backend framework + low/no js. I had a couple of side projects that I was able to complete purely due to the fact I could turn them out so quickly with Django + intercooler. I started this site to help devs who are looking at options other than SPAs, and I am hugely enthusiastic about this approach of extending html. There is no tracking or analytics on this site, it's only purpose is to aggregate and help devs see their options quickly.","title":"About"},{"location":"htmx/","text":"Htmx Introduction Htmx is a relatively new project but was born out of experience gained by founder Caron Gross with a previous project - intercooler. Htmx is framework agnostic but has been enthusiastically embraced by the Python (and particularly) the Django community. It has grown quickly in popularity over the last year. At it's core htmx allows access to ajax, css transitions, websockets and SSE via html attributes. Htmx emphasizes: Hypertext as the engine of state (server side state) Progressive enhancement Locality of behaviour At a glance Project site htmx.org License BSD 2-Clause \"Simplified\" License Repository github.com/bigskysoftware/htmx Stars Consider If A backend agnostic framework is important You can take advantage of pre-built integrations (Django, Flask) Example code The use of attributes to trigger an Ajax action is seen below (taken from intercooler introduction ) <!-- This anchor tag posts to '/click' when it is clicked --> <a ic-post-to=\"/click\"> Click Me! </a> When a user clicks on this button, issue an HTTP POST request to /clicked and use the content from the response to replace the element with the id parent-div in the DOM Integrations Please help to add more! Framework Link Django django-htmx Django django-htmx-patterns Flask flask-htmx The resources below are not meant to be exhaustive but to give you a sense of the framework Articles https://www.mattlayman.com/blog/2021/how-to-htmx-django/ Podcasts Podcasts on Htmx Talk - scroll to bottom Courses Course Link Free/Pay HTMX + Flask: Modern Python Web Apps, Hold the JavaScript Course Talk Python $","title":"Htmx"},{"location":"htmx/#htmx","text":"","title":"Htmx"},{"location":"htmx/#introduction","text":"Htmx is a relatively new project but was born out of experience gained by founder Caron Gross with a previous project - intercooler. Htmx is framework agnostic but has been enthusiastically embraced by the Python (and particularly) the Django community. It has grown quickly in popularity over the last year. At it's core htmx allows access to ajax, css transitions, websockets and SSE via html attributes. Htmx emphasizes: Hypertext as the engine of state (server side state) Progressive enhancement Locality of behaviour","title":"Introduction"},{"location":"htmx/#at-a-glance","text":"Project site htmx.org License BSD 2-Clause \"Simplified\" License Repository github.com/bigskysoftware/htmx Stars","title":"At a glance"},{"location":"htmx/#consider-if","text":"A backend agnostic framework is important You can take advantage of pre-built integrations (Django, Flask)","title":"Consider If"},{"location":"htmx/#example-code","text":"The use of attributes to trigger an Ajax action is seen below (taken from intercooler introduction ) <!-- This anchor tag posts to '/click' when it is clicked --> <a ic-post-to=\"/click\"> Click Me! </a> When a user clicks on this button, issue an HTTP POST request to /clicked and use the content from the response to replace the element with the id parent-div in the DOM","title":"Example code"},{"location":"htmx/#integrations","text":"Please help to add more! Framework Link Django django-htmx Django django-htmx-patterns Flask flask-htmx The resources below are not meant to be exhaustive but to give you a sense of the framework","title":"Integrations"},{"location":"htmx/#articles","text":"https://www.mattlayman.com/blog/2021/how-to-htmx-django/","title":"Articles"},{"location":"htmx/#podcasts","text":"Podcasts on Htmx Talk - scroll to bottom","title":"Podcasts"},{"location":"htmx/#courses","text":"Course Link Free/Pay HTMX + Flask: Modern Python Web Apps, Hold the JavaScript Course Talk Python $","title":"Courses"},{"location":"intercooler/","text":"Intercooler Introduction Intercooler.js , also founded by Carson Gross, is focused on extending html with attributes which allow ajax without writing javascript. experience gained by founder Caron Gross with a previous project - intercooler. Intercooler has been around since 2013 and is a mature and focused framework. It can be considered the parent of htmx and while supported is no longer under active development. Users are encouraged to switch to htmx for new projects. At a glance Project site intercoolerjs.org License MIT License Repository github.com/bigskysoftware/intercooler-js Stars Consider If You are already using intercooler Example code The use of attributes to trigger an Ajax action is seen below (taken from intercooler docs ) <button ic-put-to=\"/put_demo\">Put Me!</button> When a user clicks on this button, issue an HTTP PUT request to /put_demo and use the content from the response to replace the element Integrations Please help to add more! Courses Articles","title":"Intercooler"},{"location":"intercooler/#intercooler","text":"","title":"Intercooler"},{"location":"intercooler/#introduction","text":"Intercooler.js , also founded by Carson Gross, is focused on extending html with attributes which allow ajax without writing javascript. experience gained by founder Caron Gross with a previous project - intercooler. Intercooler has been around since 2013 and is a mature and focused framework. It can be considered the parent of htmx and while supported is no longer under active development. Users are encouraged to switch to htmx for new projects.","title":"Introduction"},{"location":"intercooler/#at-a-glance","text":"Project site intercoolerjs.org License MIT License Repository github.com/bigskysoftware/intercooler-js Stars","title":"At a glance"},{"location":"intercooler/#consider-if","text":"You are already using intercooler","title":"Consider If"},{"location":"intercooler/#example-code","text":"The use of attributes to trigger an Ajax action is seen below (taken from intercooler docs ) <button ic-put-to=\"/put_demo\">Put Me!</button> When a user clicks on this button, issue an HTTP PUT request to /put_demo and use the content from the response to replace the element","title":"Example code"},{"location":"intercooler/#integrations","text":"Please help to add more!","title":"Integrations"},{"location":"intercooler/#courses","text":"","title":"Courses"},{"location":"intercooler/#articles","text":"","title":"Articles"},{"location":"liveview/","text":"Phoenix LiveView I don't know much about this framework - need some help here","title":"Phoenix LiveView"},{"location":"liveview/#phoenix-liveview","text":"I don't know much about this framework - need some help here","title":"Phoenix LiveView"},{"location":"unpoly/","text":"Unpoly Introduction Upoly was started by a Rails consultancy (makandra) who was looking for a way to reduce their stack complexity and reduce the maintenance burden for the sites they maintain - see presentation here . Similar to htmx they focused on extending html with attributes which allow ajax without writing javascript. Unpoly is a very capable toolkit with a lot of pre-built functionality which is probably not surprising given its roots in a working agency. At a glance Project site unpoly.com License MIT License Repository github.com/unpoly/unpoly Stars Consider If You can make use of the pre-built functionality, especially layers A backend agnostic framework is important Example code The use of attributes to trigger an Ajax action is seen below (taken from the [unpoly tutorial] (https://unpoly.com/tutorial)) <a href=\"front.html\" class=\"one\" up-target=\".one\"> Flip </a> When a user clicks on this link, issue an HTTP GET request to front.html and use the content from the response that has a class of \"one\" to replace the current element with class of \"one\" Integrations Please help to add more! Courses Articles","title":"Unpoly"},{"location":"unpoly/#unpoly","text":"","title":"Unpoly"},{"location":"unpoly/#introduction","text":"Upoly was started by a Rails consultancy (makandra) who was looking for a way to reduce their stack complexity and reduce the maintenance burden for the sites they maintain - see presentation here . Similar to htmx they focused on extending html with attributes which allow ajax without writing javascript. Unpoly is a very capable toolkit with a lot of pre-built functionality which is probably not surprising given its roots in a working agency.","title":"Introduction"},{"location":"unpoly/#at-a-glance","text":"Project site unpoly.com License MIT License Repository github.com/unpoly/unpoly Stars","title":"At a glance"},{"location":"unpoly/#consider-if","text":"You can make use of the pre-built functionality, especially layers A backend agnostic framework is important","title":"Consider If"},{"location":"unpoly/#example-code","text":"The use of attributes to trigger an Ajax action is seen below (taken from the [unpoly tutorial] (https://unpoly.com/tutorial)) <a href=\"front.html\" class=\"one\" up-target=\".one\"> Flip </a> When a user clicks on this link, issue an HTTP GET request to front.html and use the content from the response that has a class of \"one\" to replace the current element with class of \"one\"","title":"Example code"},{"location":"unpoly/#integrations","text":"Please help to add more!","title":"Integrations"},{"location":"unpoly/#courses","text":"","title":"Courses"},{"location":"unpoly/#articles","text":"","title":"Articles"}]}